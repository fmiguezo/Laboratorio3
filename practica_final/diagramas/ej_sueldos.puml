@startuml

title "Ejercicio sueldos"

class Sistema {
    - empleados: Empleado[]
    - calculadora: CalculardorSueldos

    + calcularSueldos(): number[]
}

class CalculardorSueldos {
    - bonos: Bono[]
    + calcular(e: Empleado): number
}

abstract class Empleado {
    # sueldo: number
    # ausentismos: number
    # pctObjetivos: number
}

class Gerente extends Empleado {
    - sueldo: number = 100000;
}
class Administrativo extends Empleado {
    - sueldo: number = 40000;
}
class Operario extends Empleado {
    - sueldo: number = 10500;
}
class Cadete extends Empleado {
    - sueldo: number = 1000;
}

interface Bono {
    + calcularBono(e: Empleado): number
}

class BonoPresentismoA implements Bono {
    + calcularBono(e: Empleado): number
}

class BonoPresentismoB implements Bono {
    - monto: number = 500;

    + calcularBono(e: Empleado): number
}

class BonoResultado implements Bono {
    + calcularBono(e: Empleado): number
}


' Notas
note right of BonoPresentismoA::calcularBono
    $1000 si el empleado no faltó nunca.
    $450 si el empleado faltó 1 única vez
    $0 en cualquier otro caso.

    public calcular(e: Empleado): number {
        if (e.ausentismos == 0) {
            return 1000;
        } else if (e.ausentismos == 1) {
            return 450;
        } else {
            return 0;
        }
    }
end note

note right of BonoPresentismoB::calcularBono
    El bono B siempre suma $500 (cero pesos).

    public calcular(e: Empleado): number {
        return 500;
    }
end note

note right of BonoResultado::calcularBono
    10% sobre el sueldo neto en caso de objetivo cumplido
    $800 fijos en caso de cumplir el 80% del objetivo
    $0 (cero pesos) en cualquier otro caso.

    public calcular(e: Empleado): number {
        if (e.pctObjetivos == 100) {
            return e.sueldo * 0.1;
        } else if (e.pctObjetivos >= 80) {
            return 800;
        } else {
            return 0;
        }
    }
end note

note right of CalculardorSueldos::calcular
    public calcular(e: Empleado): number {
        let total = e.sueldo;
        for (let bono of this.bonos) {
            total += bono.calcular(e);
        }
        return total;
    }

    ' Otra forma de hacerlo
    public calcular(e: Empleado): number {
        return e.sueldo + this.bonos.reduce((total, bono) => total + bono.calcular(e), 0);
    }
end note

note right of Sistema::calcularSueldos
    public calcularSueldos(): Map<Empleado, number> {
        let sueldos = Map<Empleado, number>();
        for (let e of this.empleados) {
            sueldos.set(e, this.calculadora.calcular(e));
        }
        return sueldos;
    }

    ' Otra forma de hacerlo
    public calcularSueldos(): Map<Empleado, number> {
        return this.empleados.reduce((sueldos, e) => sueldos.set(e, this.calculadora.calcular(e)), Map<Empleado, number>());
    }
end note   

' Relaciones
Sistema *-- CalculardorSueldos
Sistema *-- Empleado
CalculardorSueldos *-- Bono
CalculardorSueldos --> Empleado : usa

@enduml